module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    .rst(rst) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    //reset_conditioner reset_cond;
    }
  }
  
  dff a [16] (#INIT(16h0000), .clk(clk));
  dff b [16] (#INIT(16h0000), .clk(clk));
  dff display [16] (#INIT(16h0000), .clk(clk));
  dff dip16 [16] (#INIT(16h0000), .clk(clk));
  alu myAlu;
    
  always {
    //reset_cond.in = ~rst_n; // input raw inverted reset signal
    //rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits   
    
    dip16.d = c{io_dip[1], io_dip[0]};  // save dip switch row 1 and 2 as 16-bit diff

    
    // check io_button (up, down, left, right, centre) configuration
    case (io_button) {
      5b01000: display.d = a.q;          // left          : set display diff to saved a
      5b01100: a.d = dip16.q;            // left + down   : save dip switch input to a diff
      5b10000: display.d = b.q;          // right         : set display diff to saved b
      5b10100: b.d = dip16.q;            // right + down  : save dip switch input to b diff
      default: display.d = myAlu.fout;   // none/other    : set display diff to myAlu output
    }
    // update myAlu inputs
    myAlu.a = a.q;
    myAlu.b = b.q;
    
    myAlu.alufn = io_dip[2][5:0];
    io_led[1:0] = {display.q[15-:8], display.q[7-:8]};  // update io_led row 1 and 0 with output
    io_led[2][7:4] = c{myAlu.overflow, myAlu.error};    // errors: addition overflow, invalid alufn: boolean, compare, shifter
    io_led[2][1:0] = c{!a.q[0], !b.q[0]};               // display 1 if a or b is divisible by 2 else 0
  }
}