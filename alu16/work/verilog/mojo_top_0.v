/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  
  reg [15:0] M_a_d, M_a_q = 16'h0000;
  
  reg [15:0] M_b_d, M_b_q = 16'h0000;
  
  reg [15:0] M_display_d, M_display_q = 16'h0000;
  
  reg [15:0] M_dip16_d, M_dip16_q = 16'h0000;
  
  wire [16-1:0] M_myAlu_fout;
  wire [3-1:0] M_myAlu_error;
  wire [1-1:0] M_myAlu_overflow;
  reg [16-1:0] M_myAlu_a;
  reg [16-1:0] M_myAlu_b;
  reg [6-1:0] M_myAlu_alufn;
  alu_1 myAlu (
    .a(M_myAlu_a),
    .b(M_myAlu_b),
    .alufn(M_myAlu_alufn),
    .fout(M_myAlu_fout),
    .error(M_myAlu_error),
    .overflow(M_myAlu_overflow)
  );
  
  always @* begin
    M_b_d = M_b_q;
    M_a_d = M_a_q;
    M_display_d = M_display_q;
    M_dip16_d = M_dip16_q;
    
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_dip16_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
    
    case (io_button)
      5'h08: begin
        M_display_d = M_a_q;
      end
      5'h0c: begin
        M_a_d = M_dip16_q;
      end
      5'h10: begin
        M_display_d = M_b_q;
      end
      5'h14: begin
        M_b_d = M_dip16_q;
      end
      default: begin
        M_display_d = M_myAlu_fout;
      end
    endcase
    M_myAlu_a = M_a_q;
    M_myAlu_b = M_b_q;
    M_myAlu_alufn = io_dip[16+0+5-:6];
    io_led[0+15-:16] = {M_display_q[8+7-:8], M_display_q[0+7-:8]};
    io_led[16+4+3-:4] = {M_myAlu_overflow, M_myAlu_error};
    io_led[16+0+1-:2] = {!M_a_q[0+0-:1], !M_b_q[0+0-:1]};
  end
  
  always @(posedge clk) begin
    M_dip16_q <= M_dip16_d;
  end
  
  
  always @(posedge clk) begin
    M_display_q <= M_display_d;
  end
  
  
  always @(posedge clk) begin
    M_b_q <= M_b_d;
  end
  
  
  always @(posedge clk) begin
    M_a_q <= M_a_d;
  end
  
endmodule
